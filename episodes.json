[{"poster_url":"https:\/\/i.vimeocdn.com\/video\/791960035.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/343661035.m3u8?s=d92e89c4adfde5ac3eec4d219c6d116725e28117&oauth2_token_id=1138343922","released_at":1561125600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/791960035_590x270.jpg","collection":"swiftui","media_duration":918,"title":"Asynchronous Networking with SwiftUI","subscription_only":true,"number":157,"url":"https:\/\/talk.objc.io\/episodes\/S01E157-asynchronous-networking-with-swiftui","synopsis":"We integrate the tiny networking library into a SwiftUI project and wrap AppKit's progress indicator in a SwiftUI view."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/790988822.jpg","released_at":1560520800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/790988822_590x270.jpg","collection":"swiftui","hls_url":"https:\/\/player.vimeo.com\/external\/341987451.m3u8?s=a089ed898e78b446f044c74ece3552ea8401c4a1&oauth2_token_id=1138343922","media_duration":1052,"title":"A First Look at SwiftUI","subscription_only":false,"number":156,"url":"https:\/\/talk.objc.io\/episodes\/S01E156-a-first-look-at-swiftui","synopsis":"We build a simple currency converter to experiment with SwiftUI's state-driven view updates."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/788679769.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/340932507.m3u8?s=dc42751648f84c2541ff4e5a73428b4cfeb20326&oauth2_token_id=1138343922","released_at":1559916000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/788679769_590x270.jpg","collection":"markdown-playgrounds","media_duration":1275,"title":"Improving Performance","subscription_only":true,"number":155,"url":"https:\/\/talk.objc.io\/episodes\/S01E155-improving-performance","synopsis":"We improve the performance of syntax highlighting to be able to work in large documents."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/786393240.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/339498315.m3u8?s=adad7f915ca4b8949afaf1a005e1e3e075a91a52&oauth2_token_id=1138343922","released_at":1559311200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/786393240_590x270.jpg","collection":"markdown-playgrounds","media_duration":1157,"title":"Building a Link Checker","subscription_only":true,"number":154,"url":"https:\/\/talk.objc.io\/episodes\/S01E154-building-a-link-checker","synopsis":"We use several pieces of code from earlier episodes to build a link checking extension on URLSession."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/780080067.jpg","released_at":1558706400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/780080067_590x270.jpg","collection":"functional-programming","hls_url":"https:\/\/player.vimeo.com\/external\/333936786.m3u8?s=c96d1f7ec6d294647ce3f2fb70db16e66b4c239f&oauth2_token_id=1138343922","media_duration":1164,"title":"Making Impossible States Impossible","subscription_only":false,"number":153,"url":"https:\/\/talk.objc.io\/episodes\/S01E153-making-impossible-states-impossible","synopsis":"We discuss how Swift's type system can be used to eliminate impossible states from our code."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/779225094.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/336818209.m3u8?s=56e3a45d082a39087ad76cf3037ef88266045227&oauth2_token_id=1138343922","released_at":1558101600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/779225094_590x270.jpg","collection":"functional-programming","media_duration":1659,"title":"Processing CommonMark using Folds","subscription_only":true,"number":152,"url":"https:\/\/talk.objc.io\/episodes\/S01E152-processing-commonmark-using-folds","synopsis":"We implement fold on the CommonMark syntax tree and use it to extract links and text from a document."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/779206263.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/335383997.m3u8?s=6a44cd71a5f609d929badc80f089db8ab3504354&oauth2_token_id=1138343922","released_at":1557496800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/779206263_590x270.jpg","collection":"functional-programming","media_duration":1406,"title":"Reduce vs. Fold","subscription_only":true,"number":151,"url":"https:\/\/talk.objc.io\/episodes\/S01E151-reduce-vs-fold","synopsis":"We explore the differences between reduce and fold and how they can be implemented on any enum."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/778914330.jpg","released_at":1556892000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/778914330_590x270.jpg","collection":"functional-programming","hls_url":"https:\/\/player.vimeo.com\/external\/333042859.m3u8?s=5a75ada700760696deef9527f78154f5c610aebc&oauth2_token_id=1138343922","media_duration":1417,"title":"The Origins of Reduce","subscription_only":false,"number":150,"url":"https:\/\/talk.objc.io\/episodes\/S01E150-the-origins-of-reduce","synopsis":"Wouter joins us to explore the origins of the reduce function."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/776184830.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/332672172.m3u8?s=a5cf8747a10d06de8b367558c2b69544ac6568e8&oauth2_token_id=1138343922","released_at":1556287200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/776184830_590x270.jpg","collection":"markdown-playgrounds","media_duration":1781,"title":"Swift Syntax Highlighting","subscription_only":true,"number":149,"url":"https:\/\/talk.objc.io\/episodes\/S01E149-swift-syntax-highlighting","synopsis":"We use SwiftSyntax to add highlighting for Swift code blocks."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/773772314.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/331419994.m3u8?s=ddbe2f578197d50d812de352015d1e522a22ef61&oauth2_token_id=1138343922","released_at":1555682400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/773772314_590x270.jpg","collection":"markdown-playgrounds","media_duration":1787,"title":"String Handling","subscription_only":true,"number":148,"url":"https:\/\/talk.objc.io\/episodes\/S01E148-string-handling","synopsis":"We fix a couple of String-related bugs when interoperating with the cmark library and the REPL."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/772881880.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/330028216.m3u8?s=afba06e3831d9295280cb5c10dfc79910651f536&oauth2_token_id=1138343922","released_at":1555077600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/772881880_590x270.jpg","collection":"markdown-playgrounds","media_duration":1391,"title":"Executing Swift Code","subscription_only":true,"number":147,"url":"https:\/\/talk.objc.io\/episodes\/S01E147-executing-swift-code","synopsis":"We launch a Swift REPL process to execute Swift code in our Markdown file."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/769420413.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/328628729.m3u8?s=705b1cfcb9d1ca808a0f58c90bf090f09afeecda&oauth2_token_id=1138343922","released_at":1554476400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/769420413_590x270.jpg","collection":"markdown-playgrounds","media_duration":1587,"title":"Markdown Syntax Highlighting","subscription_only":true,"number":146,"url":"https:\/\/talk.objc.io\/episodes\/S01E146-markdown-syntax-highlighting","synopsis":"We use CommonMark to parse the markdown string and then add attributes to highlight its syntax."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/769411132.jpg","released_at":1553871600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/769411132_590x270.jpg","collection":"markdown-playgrounds","hls_url":"https:\/\/player.vimeo.com\/external\/325616799.m3u8?s=2dd562c101df523ce70314eb4cbf11c6615c2327&oauth2_token_id=1138343922","media_duration":1512,"title":"Setting Up a Document-Based App","subscription_only":false,"number":145,"url":"https:\/\/talk.objc.io\/episodes\/S01E145-setting-up-a-document-based-app","synopsis":"We start building our Markdown Playgrounds app from a plain command-line app package, leveraging AppKit's document architecture."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/762373000.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/325845017.m3u8?s=2052f3fdd9d00c0ebfed7820189b773c40bb7fa4&oauth2_token_id=1138343922","released_at":1553266800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/762373000_590x270.jpg","collection":"swift-the-language","media_duration":897,"title":"String Interpolation in Swift 5 (Part 2)","subscription_only":true,"number":144,"url":"https:\/\/talk.objc.io\/episodes\/S01E144-string-interpolation-in-swift-5-part-2","synopsis":"We refactor our string interpolation code to allow concatenation of multiple interpolated SQL queries."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/762357484.jpg","released_at":1552662000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/762357484_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/319897843.m3u8?s=e3e511aaf0b3b1e9e4c76ab17bc8cc86b0a72478&oauth2_token_id=1138343922","media_duration":1007,"title":"String Interpolation in Swift 5","subscription_only":false,"number":143,"url":"https:\/\/talk.objc.io\/episodes\/S01E143-string-interpolation-in-swift-5","synopsis":"We use Swift 5's new string interpolation API to automatically insert placeholders in SQL queries."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/761471025.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/322232795.m3u8?s=3e45c13d82f090d691fefa3622f4c36747a8025b&oauth2_token_id=1138343922","released_at":1552057200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/761471025_590x270.jpg","collection":"server-side-swift","media_duration":1091,"title":"Flow Testing with Protocols","subscription_only":true,"number":142,"url":"https:\/\/talk.objc.io\/episodes\/S01E142-flow-testing-with-protocols","synopsis":"Using a protocol-based approach, we show how we write tests for the Swift Talk backend."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/761471249.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/320739448.m3u8?s=0d0a52e8cf01fc6ff7f1d535d7e560a626349de1&oauth2_token_id=1138343922","released_at":1551452400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/761471249_590x270.jpg","collection":"server-side-swift","media_duration":1599,"title":"Functional Dependencies","subscription_only":true,"number":141,"url":"https:\/\/talk.objc.io\/episodes\/S01E141-functional-dependencies","synopsis":"We show a refactoring of the view code in the Swift Talk backend that allows us to pass around dependencies automatically using a functional pattern."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/758836751.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/318967143.m3u8?s=03495cac3403cbd89036748020cee7430e5dad2c&oauth2_token_id=1138343922","released_at":1550847600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/758836751_590x270.jpg","collection":"server-side-swift","media_duration":1259,"title":"The Swift Talk Backend (Part 3)","subscription_only":true,"number":140,"url":"https:\/\/talk.objc.io\/episodes\/S01E140-the-swift-talk-backend-part-3","synopsis":"To finish up the team member signup, we use a CSRF-validated POST request and then write a test for what we've built."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/755465327.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/317456644.m3u8?s=2cdbfbbed9791e4f1fb0fa3b4181e2fb204b0bab&oauth2_token_id=1138343922","released_at":1550242800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/755465327_590x270.jpg","collection":"server-side-swift","media_duration":1540,"title":"The Swift Talk Backend (Part 2)","subscription_only":true,"number":139,"url":"https:\/\/talk.objc.io\/episodes\/S01E139-the-swift-talk-backend-part-2","synopsis":"We continue working on the team member signup feature, showing how we handle sessions and perform database queries."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/755467987.jpg","released_at":1549638000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/755467987_590x270.jpg","collection":"server-side-swift","hls_url":"https:\/\/player.vimeo.com\/external\/313999121.m3u8?s=9f9386503f7dfc243e26134d8b442014e91c48c9&oauth2_token_id=1138343922","media_duration":1520,"title":"The Swift Talk Backend (Part 1)","subscription_only":false,"number":138,"url":"https:\/\/talk.objc.io\/episodes\/S01E138-the-swift-talk-backend-part-1","synopsis":"We show our new Swift Talk backend built on top of SwiftNIO by implementing a new team member signup feature."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/754642303.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/314778871.m3u8?s=ae80c13cc0f9d6c7bea286d4113b9061c0598199&oauth2_token_id=1138343922","released_at":1549033200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/754642303_590x270.jpg","collection":"networking","media_duration":1479,"title":"Testing Networking Code","subscription_only":true,"number":137,"url":"https:\/\/talk.objc.io\/episodes\/S01E137-testing-networking-code","synopsis":"We implement a test URL session that we can use to fake network responses."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/753560517.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/313347170.m3u8?s=4cf86885a01b2b193942bfb28b33bea7dcbc22f2&oauth2_token_id=1138343922","released_at":1548428400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/753560517_590x270.jpg","collection":"networking","media_duration":1208,"title":"Combined Resources with Futures","subscription_only":true,"number":136,"url":"https:\/\/talk.objc.io\/episodes\/S01E136-combined-resources-with-futures","synopsis":"We show an alternative implementation of combined resources that uses futures."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/750868879.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/312111472.m3u8?s=0b875fca21e9fa35ba6951e4650daa97b1c372f0&oauth2_token_id=1138343922","released_at":1547823600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/750868879_590x270.jpg","collection":"networking","media_duration":1330,"title":"Combined Resources (Part 2)","subscription_only":true,"number":135,"url":"https:\/\/talk.objc.io\/episodes\/S01E135-combined-resources-part-2","synopsis":"We add zip to the combined resource type, allowing us to express resources with multiple requests in parallel."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/750845156.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/310788602.m3u8?s=2a4ce5fdf7ab0910fb7b1d32569e3a7d15620bb4&oauth2_token_id=1138343922","released_at":1547218800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/750845156_590x270.jpg","collection":"networking","media_duration":1364,"title":"Combined Resources (Part 1)","subscription_only":true,"number":134,"url":"https:\/\/talk.objc.io\/episodes\/S01E134-combined-resources-part-1","synopsis":"We implement an abstraction on top of our tiny networking library to express resources consisting of multiple requests."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/749353427.jpg","released_at":1546614000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/749353427_590x270.jpg","collection":"networking","hls_url":"https:\/\/player.vimeo.com\/external\/309059915.m3u8?s=f9f04b9fe627b60370f0126d326e11485e935392&oauth2_token_id=1138343922","media_duration":1317,"title":"Tiny Networking Library Revisited","subscription_only":false,"number":133,"url":"https:\/\/talk.objc.io\/episodes\/S01E133-tiny-networking-library-revisited","synopsis":"We revisit the networking library we built in the first episode and discuss improvements we've made over the years."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/746110882.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/307679498.m3u8?s=876c7227948610489fcbd661d63b86f192357eb2&oauth2_token_id=1138343922","released_at":1545404400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/746110882_590x270.jpg","collection":"map-routing","media_duration":1846,"title":"Dijkstra's Shortest Path Algorithm","subscription_only":true,"number":132,"url":"https:\/\/talk.objc.io\/episodes\/S01E132-dijkstra-s-shortest-path-algorithm","synopsis":"We implement Dijkstra's algorithm to find the shortest path between any two points in the trail network."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/743279296.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/306394823.m3u8?s=13e41ea1370fb31ecefdac6807e4bbb4285fa269&oauth2_token_id=1138343922","released_at":1544799600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/743279296_590x270.jpg","collection":"map-routing","media_duration":1275,"title":"Performance Optimizations","subscription_only":true,"number":131,"url":"https:\/\/talk.objc.io\/episodes\/S01E131-performance-optimizations","synopsis":"We work on the efficiency of our graph-building algorithm, improving it by more than an order of magnitude."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/744446134.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/305054029.m3u8?s=3269333d4e252c7b92bc0717bd7202561db508a2&oauth2_token_id=1138343922","released_at":1544194800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/744446134_590x270.jpg","collection":"map-routing","media_duration":1118,"title":"Building the Graph (Part 2)","subscription_only":true,"number":130,"url":"https:\/\/talk.objc.io\/episodes\/S01E130-building-the-graph-part-2","synopsis":"We improve the graph-building algorithm by detecting overlaps between the tracks."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/741655635.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/303732792.m3u8?s=8ff5b673ee1050dd26f842ad4c9ed506f735ecc9&oauth2_token_id=1138343922","released_at":1543590000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/741655635_590x270.jpg","collection":"map-routing","media_duration":1912,"title":"Building the Graph (Part 1)","subscription_only":true,"number":129,"url":"https:\/\/talk.objc.io\/episodes\/S01E129-building-the-graph-part-1","synopsis":"We start implementing the algorithm that transforms the GPS points into a graph, which we then visualize for debugging purposes."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/739679550.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/302788828.m3u8?s=42f2df19d2984144c7117fc96c88151ebcf28e49&oauth2_token_id=1138343922","released_at":1542985200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/739679550_590x270.jpg","collection":"map-routing","media_duration":1605,"title":"Shortest Distance from Point to Line","subscription_only":true,"number":128,"url":"https:\/\/talk.objc.io\/episodes\/S01E128-shortest-distance-from-point-to-line","synopsis":"We start implementing the routing logic by looking at the problem of calculating the shortest distance from a point to a line."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/737791619.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/301160464.m3u8?s=394b06a4811b9b2d0fb086a96e3ce9543aead5fe&oauth2_token_id=1138343922","released_at":1542380400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/737791619_590x270.jpg","collection":"map-routing","media_duration":1541,"title":"Selecting Points on Tracks","subscription_only":true,"number":127,"url":"https:\/\/talk.objc.io\/episodes\/S01E127-selecting-points-on-tracks","synopsis":"We enable the selection of points on our running tracks by tapping on the map, and we finish up by factoring a lot of this code out of the view controller."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/737235208.jpg","released_at":1541775600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/737235208_590x270.jpg","collection":"map-routing","hls_url":"https:\/\/player.vimeo.com\/external\/299165636.m3u8?s=9d1122561507bac42f612a5d4b5007fe56a68487&oauth2_token_id=1138343922","media_duration":1145,"title":"Rendering Tracks","subscription_only":false,"number":126,"url":"https:\/\/talk.objc.io\/episodes\/S01E126-rendering-tracks","synopsis":"We show the routing app we'll build in this series and take the first steps by rendering track polygons on a map."},{"synopsis":"We show how the layout library we've built over the past two months can be used to adapt to any font and screen size.","poster_url":"https:\/\/i.vimeocdn.com\/video\/733862073.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/304120699.m3u8?s=cae2100dd85ef8466ec7d4a23644da541f334810&oauth2_token_id=1138343922","released_at":1541170800,"hls_url":"https:\/\/player.vimeo.com\/external\/296433724.m3u8?s=122cfa315581d75fb1ff62c10c9402ef804cc466&oauth2_token_id=1138343922","collection":"building-a-layout-library","media_duration":1244,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/733862073_590x270.jpg","title":"Building a Responsive Layout","subscription_only":false,"url":"https:\/\/talk.objc.io\/episodes\/S01E125-building-a-responsive-layout","number":125},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/733295682.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/304120678.m3u8?s=c02a912ae7c161fbd362008e95cb30d863fbecb6&oauth2_token_id=1138343922","released_at":1540562400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/733295682_590x270.jpg","collection":"building-a-layout-library","media_duration":1161,"title":"Flexible Boxes","subscription_only":true,"number":124,"url":"https:\/\/talk.objc.io\/episodes\/S01E124-flexible-boxes","synopsis":"We implement the flexible width option for nested layouts."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746438.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/296439635.m3u8?s=5c4fe1db928dca86a59d0b52e39330f7efb2e7cc&oauth2_token_id=1138343922","released_at":1539957600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746438_590x270.jpg","collection":"building-a-layout-library","media_duration":1211,"title":"Margins and Backgrounds","subscription_only":true,"number":123,"url":"https:\/\/talk.objc.io\/episodes\/S01E123-margins-and-backgrounds","synopsis":"We build upon the nested layout feature from last time to support layout margins, backgrounds, and more."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746490.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/296439608.m3u8?s=1480a93769e47e2fa417b3a0a492948571c1955d&oauth2_token_id=1138343922","released_at":1539352800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746490_590x270.jpg","collection":"building-a-layout-library","media_duration":1428,"title":"Nested Layouts","subscription_only":true,"number":122,"url":"https:\/\/talk.objc.io\/episodes\/S01E122-nested-layouts","synopsis":"We build a feature that allows us to create more complex layouts by nesting layouts within each other."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746570.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294638349.m3u8?s=289fc303aa92933c7e07b151ff214629e7f9caf2&oauth2_token_id=1138343922","released_at":1538748000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746570_590x270.jpg","collection":"building-a-layout-library","media_duration":936,"title":"Flexible Spaces","subscription_only":true,"number":121,"url":"https:\/\/talk.objc.io\/episodes\/S01E121-flexible-spaces","synopsis":"We add flexible spaces to our layout library and show how elements can be shown or hidden depending on the available space."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746656.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294637510.m3u8?s=0bbc143f7ba2c2637250b43f0bb38aea47b658f0&oauth2_token_id=1138343922","released_at":1538143200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746656_590x270.jpg","collection":"building-a-layout-library","media_duration":1495,"title":"Refactoring for Efficiency & Upcoming Features","subscription_only":true,"number":120,"url":"https:\/\/talk.objc.io\/episodes\/S01E120-refactoring-for-efficiency-upcoming-features","synopsis":"We refactor our code to remove duplication, improve efficiency, and enable features like flexible spacing."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746686.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294634441.m3u8?s=63c6e1c9ce0cf9d9f1ebf32892057e83c6bb3f6a&oauth2_token_id=1138343922","released_at":1537538400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746686_590x270.jpg","collection":"building-a-layout-library","media_duration":1465,"title":"Spacing & Better Syntax","subscription_only":true,"number":119,"url":"https:\/\/talk.objc.io\/episodes\/S01E119-spacing-better-syntax","synopsis":"We add some features to our layout library — starting with horizontal and vertical spacing — along with a better syntax to define layouts."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746743.jpg","released_at":1536933600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746743_590x270.jpg","collection":"building-a-layout-library","hls_url":"https:\/\/player.vimeo.com\/external\/294632666.m3u8?s=5559cfe596f0c46c999d7bd7f6d77f4148f7092c&oauth2_token_id=1138343922","media_duration":1878,"title":"Introduction & Prototype","subscription_only":false,"number":118,"url":"https:\/\/talk.objc.io\/episodes\/S01E118-introduction-prototype","synopsis":"We start building a responsive layout library that makes it easy to create layouts for all screen and font sizes."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746779.jpg","released_at":1536328800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746779_590x270.jpg","collection":"building-a-form-library","hls_url":"https:\/\/player.vimeo.com\/external\/294628590.m3u8?s=3f42ee1976b1607b55e8f623b2714f355acb3aaa&oauth2_token_id=1138343922","media_duration":895,"title":"Showing & Hiding Sections","subscription_only":false,"number":117,"url":"https:\/\/talk.objc.io\/episodes\/S01E117-showing-hiding-sections","synopsis":"Using a simple key path API, we add the ability to control the visibility of sections by any condition."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746804.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294626008.m3u8?s=52396bd6d9d7bf3343b6c475a9a2871becd38935&oauth2_token_id=1138343922","released_at":1535724000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746804_590x270.jpg","collection":"server-side-swift","media_duration":1338,"title":"Building a Custom XML Decoder (Part 2)","subscription_only":true,"number":116,"url":"https:\/\/talk.objc.io\/episodes\/S01E116-building-a-custom-xml-decoder-part-2","synopsis":"We add support for arrays by implementing an unkeyed decoding container and use custom decoding logic for dates and URLs."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746871.jpg","released_at":1535119200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746871_590x270.jpg","collection":"server-side-swift","hls_url":"https:\/\/player.vimeo.com\/external\/294624911.m3u8?s=ad19177093c6f1696c99a4c3611be8d93979383b&oauth2_token_id=1138343922","media_duration":1486,"title":"Building a Custom XML Decoder","subscription_only":false,"number":115,"url":"https:\/\/talk.objc.io\/episodes\/S01E115-building-a-custom-xml-decoder","synopsis":"We implement a custom XML decoder that allows us to decode responses from an XML API using Decodable."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746929.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294623505.m3u8?s=6e2601ccbbb31047ba2ff23732650ff7bb9b747d&oauth2_token_id=1138343922","released_at":1534514400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746929_590x270.jpg","collection":"server-side-swift","media_duration":1408,"title":"Reflection with Mirror and Decodable","subscription_only":true,"number":114,"url":"https:\/\/talk.objc.io\/episodes\/S01E114-reflection-with-mirror-and-decodable","synopsis":"We're using Swift's Mirror and Decodable APIs to generate database queries for structs in our Swift Talk backend project."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746953.jpg","released_at":1533909600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746953_590x270.jpg","collection":"building-a-form-library","hls_url":"https:\/\/player.vimeo.com\/external\/294622752.m3u8?s=40387c071f9fad0c9b26aac283942024baf6a486&oauth2_token_id=1138343922","media_duration":1665,"title":"Text Fields, Multi-Select, and Nested Forms","subscription_only":false,"number":113,"url":"https:\/\/talk.objc.io\/episodes\/S01E113-text-fields-multi-select-and-nested-forms","synopsis":"We return to the form library project and add several features to simplify common tasks."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747011.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294621923.m3u8?s=ee3e2544faacf89e9c8ec2aac2ba88fd4273ce8b&oauth2_token_id=1138343922","released_at":1533304800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747011_590x270.jpg","collection":"tooling","media_duration":1558,"title":"iOS Remote Debugger: The Network Framework","subscription_only":true,"number":112,"url":"https:\/\/talk.objc.io\/episodes\/S01E112-ios-remote-debugger-the-network-framework","synopsis":"We use Apple's new Network framework to simplify our own code."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747055.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294621214.m3u8?s=0d126ddad51b0e13b0c0d60b8eebdf1c20392826&oauth2_token_id=1138343922","released_at":1532700000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747055_590x270.jpg","collection":"tooling","media_duration":1775,"title":"iOS Remote Debugger: Receiving Data","subscription_only":true,"number":111,"url":"https:\/\/talk.objc.io\/episodes\/S01E111-ios-remote-debugger-receiving-data","synopsis":"We implement a JSON over TCP decoder to enable the debug client to receive data from the Mac app."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747111.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294620449.m3u8?s=9d07b33c23bcae3d73e67420206cb13d465e168d&oauth2_token_id=1138343922","released_at":1532095200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747111_590x270.jpg","collection":"tooling","media_duration":1358,"title":"iOS Remote Debugger: Sending Data","subscription_only":true,"number":110,"url":"https:\/\/talk.objc.io\/episodes\/S01E110-ios-remote-debugger-sending-data","synopsis":"We create a class that encapsulates the complexities of sending data via an output stream."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747135.jpg","released_at":1531490400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747135_590x270.jpg","collection":"tooling","hls_url":"https:\/\/player.vimeo.com\/external\/294619830.m3u8?s=2e1daffb9ad64d9f007a21a689376644c48f8616&oauth2_token_id=1138343922","media_duration":1710,"title":"iOS Remote Debugger: Connecting with Bonjour","subscription_only":false,"number":109,"url":"https:\/\/talk.objc.io\/episodes\/S01E109-ios-remote-debugger-connecting-with-bonjour","synopsis":"We're building a remote view state debugger, starting with the networking code on the client."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747199.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294618885.m3u8?s=76d868c13d833a0d50150c2759b3e122e948dde1&oauth2_token_id=1138343922","released_at":1530885600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747199_590x270.jpg","collection":"refactoring-large-view-controllers","media_duration":1646,"title":"Extracting View Code","subscription_only":true,"number":108,"url":"https:\/\/talk.objc.io\/episodes\/S01E108-extracting-view-code","synopsis":"In the last episode of this series, we factor out view code from the large view controller into a custom view class."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747263.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294618009.m3u8?s=e7dda878dc9a8c689898442b44b5b3efcaa1ddbc&oauth2_token_id=1138343922","released_at":1530280800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747263_590x270.jpg","collection":"refactoring-large-view-controllers","media_duration":1791,"title":"Child View Controllers (2)","subscription_only":true,"number":107,"url":"https:\/\/talk.objc.io\/episodes\/S01E107-child-view-controllers-2","synopsis":"We use the child view controller we created last time to factor out more code from the large view controller."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747336.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294616959.m3u8?s=a39f1559b0a0c049efefd1d00f637f2075503b00&oauth2_token_id=1138343922","released_at":1529676000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747336_590x270.jpg","collection":"refactoring-large-view-controllers","media_duration":1586,"title":"Child View Controllers","subscription_only":true,"number":106,"url":"https:\/\/talk.objc.io\/episodes\/S01E106-child-view-controllers","synopsis":"We extract a child view controller to further slim down our large view controller, making sure the code keeps compiling throughout the process."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747358.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294615264.m3u8?s=bf9f88073b9472aed2e6b98f65716d9da5c01054&oauth2_token_id=1138343922","released_at":1529071200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747358_590x270.jpg","collection":"refactoring-large-view-controllers","media_duration":1672,"title":"Extracting Networking Code","subscription_only":true,"number":105,"url":"https:\/\/talk.objc.io\/episodes\/S01E105-extracting-networking-code","synopsis":"We refactor networking-related code out of the view controller, separating networking and data transformation logic from UI code in the process."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747452.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294615248.m3u8?s=7cae90e7adb47f2dea1209002acdb6c6708a86b7&oauth2_token_id=1138343922","released_at":1528466400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747452_590x270.jpg","collection":"refactoring-large-view-controllers","media_duration":1130,"title":"Extracting Model Code","subscription_only":true,"number":104,"url":"https:\/\/talk.objc.io\/episodes\/S01E104-extracting-model-code","synopsis":"We extract Core Data-related code from the large view controller and move it into the model layer."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747474.jpg","released_at":1527861600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747474_590x270.jpg","collection":"refactoring-large-view-controllers","hls_url":"https:\/\/player.vimeo.com\/external\/294614693.m3u8?s=850de51a99385cd0c232cb4340a2d9c879ff7d2d&oauth2_token_id=1138343922","media_duration":1571,"title":"Extracting Pure Functions","subscription_only":false,"number":103,"url":"https:\/\/talk.objc.io\/episodes\/S01E103-extracting-pure-functions","synopsis":"We begin refactoring a large view controller from the Wikipedia iOS app by pulling pieces of helper code out as pure functions."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747513.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294612925.m3u8?s=15243562bcead1c6320f43944822608d229b53c0&oauth2_token_id=1138343922","released_at":1527256800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747513_590x270.jpg","collection":"building-a-form-library","media_duration":1468,"title":"Declarative Syntax","subscription_only":true,"number":102,"url":"https:\/\/talk.objc.io\/episodes\/S01E102-declarative-syntax","synopsis":"After finishing the cleanup from the last episode, we refactor our forms API to be even more succinct and declarative."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747564.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294612432.m3u8?s=60d51d2e7d7733b26962ec7601eeb705d86e8157&oauth2_token_id=1138343922","released_at":1526652000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747564_590x270.jpg","collection":"building-a-form-library","media_duration":1622,"title":"Cell and Section Helpers","subscription_only":true,"number":101,"url":"https:\/\/talk.objc.io\/episodes\/S01E101-cell-and-section-helpers","synopsis":"We create helper functions for form cells and sections, which simplify managing references and propagating updates."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747591.jpg","released_at":1526121060,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747591_590x270.jpg","collection":"experiments","hls_url":"https:\/\/player.vimeo.com\/external\/294611886.m3u8?s=f3b15388ad1c4ce31574c56670a94a7eb09ea45b&oauth2_token_id=1138343922","media_duration":2920,"title":"100th Episode Live Q&A","subscription_only":false,"number":100,"url":"https:\/\/talk.objc.io\/episodes\/S01E100-100th-episode-live-q-a","synopsis":"In our 100th episode we take questions from our viewers!"},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747640.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294610097.m3u8?s=c935e0c5bca660317b8a6953884288db5708b347&oauth2_token_id=1138343922","released_at":1525442400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747640_590x270.jpg","collection":"building-a-form-library","media_duration":1742,"title":"Creating Reusable Components","subscription_only":true,"number":99,"url":"https:\/\/talk.objc.io\/episodes\/S01E99-creating-reusable-components","synopsis":"We extract reusable toggle switch and text field components from our forms code and do more cleaning up in the process."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747697.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294609304.m3u8?s=9c8d045119f0b2bf7a51f7f1faed059f17155cd7&oauth2_token_id=1138343922","released_at":1524837600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747697_590x270.jpg","collection":"building-a-form-library","media_duration":1303,"title":"Cleaning Up the Code","subscription_only":true,"number":98,"url":"https:\/\/talk.objc.io\/episodes\/S01E98-cleaning-up-the-code","synopsis":"After refactoring in past episodes, it's time for some housekeeping: we clean up our form code and make it more reusable with generics."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747757.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294608678.m3u8?s=fdb39fcfda7223ab0b875d7c3ceabb6c189510c6&oauth2_token_id=1138343922","released_at":1524232800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747757_590x270.jpg","collection":"building-a-form-library","media_duration":1829,"title":"Creating a Reusable Form Driver","subscription_only":true,"number":97,"url":"https:\/\/talk.objc.io\/episodes\/S01E97-creating-a-reusable-form-driver","synopsis":"We refactor the form driver class to be reusable and define the entire form in a simple function."},{"synopsis":"We continue refactoring our forms code by creating a form table view controller as the first reusable component.","poster_url":"https:\/\/i.vimeocdn.com\/video\/731747814.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294607106.m3u8?s=fe8e04ae9cbb94d7cbb16bfbae279e5439c4258f&oauth2_token_id=1138343922","released_at":1523628000,"hls_url":"https:\/\/player.vimeo.com\/external\/294607073.m3u8?s=8587e25afcdf7dc4fed361864b389bc8f3103b73&oauth2_token_id=1138343922","collection":"building-a-form-library","media_duration":1220,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747814_590x270.jpg","title":"Extracting a Reusable Form View Controller","subscription_only":false,"url":"https:\/\/talk.objc.io\/episodes\/S01E96-extracting-a-reusable-form-view-controller","number":96},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747851.jpg","released_at":1523023200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747851_590x270.jpg","collection":"building-a-form-library","hls_url":"https:\/\/player.vimeo.com\/external\/294606227.m3u8?s=573af5d6e340279d46a9e4a5df21cbf8b3ce52d9&oauth2_token_id=1138343922","media_duration":1312,"title":"Simplifying IndexPath Logic","subscription_only":false,"number":95,"url":"https:\/\/talk.objc.io\/episodes\/S01E95-simplifying-indexpath-logic","synopsis":"We begin to refactor the imperative table view code from the last episode, working toward a more declarative approach of defining our form."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747919.jpg","released_at":1522422000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747919_590x270.jpg","collection":"building-a-form-library","hls_url":"https:\/\/player.vimeo.com\/external\/294604487.m3u8?s=7b3cb4b2ebd51e067ac958842ebd529ad6bdef89&oauth2_token_id=1138343922","media_duration":1496,"title":"Introduction","subscription_only":false,"number":94,"url":"https:\/\/talk.objc.io\/episodes\/S01E94-introduction","synopsis":"This episode marks the beginning of a new series where we refactor a hand-coded settings form into a reusable, declarative form library. In this episode, we build the base version and discuss the design goals of the library."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731747988.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294603387.m3u8?s=c1dfb07b0d42ccd38096b15ffa095370c30bf368&oauth2_token_id=1138343922","released_at":1521817200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747988_590x270.jpg","collection":"swift-the-language","media_duration":1363,"title":"Handling Optionals","subscription_only":true,"number":93,"url":"https:\/\/talk.objc.io\/episodes\/S01E93-handling-optionals","synopsis":"We discuss many considerations and techniques for working with optionals."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748015.jpg","released_at":1521212400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748015_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294601767.m3u8?s=3e1839c785644f4d63f726334c04c450c45c794d&oauth2_token_id=1138343922","media_duration":1341,"title":"Practicing with Pointers","subscription_only":false,"number":92,"url":"https:\/\/talk.objc.io\/episodes\/S01E92-practicing-with-pointers","synopsis":"We use Swift's pointer APIs to read a text file and split it into lines without using Swift's collection and string types."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748042.jpg","released_at":1520607600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748042_590x270.jpg","collection":"libraries","media_duration":1424,"title":"Rendering Markdown with Syntax Highlighting","subscription_only":true,"number":91,"url":"https:\/\/talk.objc.io\/episodes\/S01E91-rendering-markdown-with-syntax-highlighting","synopsis":"We extend a basic Markdown library using protocol composition to add support for syntax highlighting in Swift code blocks."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748101.jpg","released_at":1520002800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748101_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294599908.m3u8?s=1abdda2cb76c351184c877f0d1148e3e189a200b&oauth2_token_id=1138343922","media_duration":1319,"title":"Concurrent Map","subscription_only":false,"number":90,"url":"https:\/\/talk.objc.io\/episodes\/S01E90-concurrent-map","synopsis":"We implement a concurrent version of the map method for arrays."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748136.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294597069.m3u8?s=bbf76cff3d88e98519ad505bac654d62231d4845&oauth2_token_id=1138343922","released_at":1519398000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748136_590x270.jpg","collection":"libraries","media_duration":1420,"title":"Extensible Libraries 2: Protocol Composition","subscription_only":true,"number":89,"url":"https:\/\/talk.objc.io\/episodes\/S01E89-extensible-libraries-2-protocol-composition","synopsis":"We show how protocol composition can be used to design extensible libraries, thereby solving the so-called \"Expression Problem.\""},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748197.jpg","released_at":1518793200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748197_590x270.jpg","collection":"libraries","hls_url":"https:\/\/player.vimeo.com\/external\/294597007.m3u8?s=af83e467cc19164f393968be5152052e2d5a8d53&oauth2_token_id=1138343922","media_duration":1344,"title":"Extensible Libraries 1: Enums vs Classes","subscription_only":false,"number":88,"url":"https:\/\/talk.objc.io\/episodes\/S01E88-extensible-libraries-1-enums-vs-classes","synopsis":"We discuss the capabilities and limitations of enums and classes when designing extensible libraries."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748249.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294596663.m3u8?s=ee156aca973eddffbfa72a7d5afa03c1f8ce3e2a&oauth2_token_id=1138343922","released_at":1518188400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748249_590x270.jpg","collection":"architecture","media_duration":1449,"title":"Sharing State between View Controllers in MVC (Part 2)","subscription_only":true,"number":87,"url":"https:\/\/talk.objc.io\/episodes\/S01E87-sharing-state-between-view-controllers-in-mvc-part-2","synopsis":"We continue implementing a mini player in the MVC variant of the sample app found in our App Architecture book."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748288.jpg","released_at":1517583600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748288_590x270.jpg","collection":"architecture","hls_url":"https:\/\/player.vimeo.com\/external\/294595092.m3u8?s=0e1f2ed1e332ceebcdc14f048c92f017de785496&oauth2_token_id=1138343922","media_duration":1165,"title":"Sharing State between View Controllers in MVC (Part 1)","subscription_only":false,"number":86,"url":"https:\/\/talk.objc.io\/episodes\/S01E86-sharing-state-between-view-controllers-in-mvc-part-1","synopsis":"We add a mini player to the MVC variant of the sample app found in our App Architecture book. We adjust our storyboard and discuss how to adapt the architecture."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748350.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294594281.m3u8?s=db7cd4e5631db20cd496f3bc0f8a78916faa6f5a&oauth2_token_id=1138343922","released_at":1516978800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748350_590x270.jpg","collection":"type-safe-api-wrappers","media_duration":2011,"title":"Wrapping libgit2","subscription_only":true,"number":85,"url":"https:\/\/talk.objc.io\/episodes\/S01E85-wrapping-libgit2","synopsis":"We write a wrapper around the libgit2 C library to work with Git repositories from macOS and iOS apps — and for the fun of using Swift's pointer APIs!"},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748371.jpg","released_at":1516381200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748371_590x270.jpg","collection":"architecture","hls_url":"https:\/\/player.vimeo.com\/external\/294592716.m3u8?s=19497d87c2abe547a75d2674dcab03d69a31e877&oauth2_token_id=1138343922","media_duration":281,"title":"Introducing Our New Book: App Architecture","subscription_only":false,"number":84,"url":"https:\/\/talk.objc.io\/episodes\/S01E84-introducing-our-new-book-app-architecture","synopsis":"Today we're releasing the early access edition of our new App Architecture book. We explain how it came about, what's in it, and how early access works."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748440.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294592525.m3u8?s=95eed4cd99691bbde34850a6782e453abc05e2ce&oauth2_token_id=1138343922","released_at":1515769200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748440_590x270.jpg","collection":"type-safe-api-wrappers","media_duration":1363,"title":"Wrapping Analytics APIs","subscription_only":true,"number":83,"url":"https:\/\/talk.objc.io\/episodes\/S01E83-wrapping-analytics-apis","synopsis":"We look at different techniques for wrapping analytics APIs in Swift and discuss their advantages and disadvantages."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748477.jpg","released_at":1515164400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748477_590x270.jpg","collection":"functional-programming","hls_url":"https:\/\/player.vimeo.com\/external\/294591328.m3u8?s=7960bd3f3ac3b7bf69a312fc0e38a89c753f7a53&oauth2_token_id=1138343922","media_duration":1120,"title":"Refactoring Imperative Layout Code","subscription_only":false,"number":82,"url":"https:\/\/talk.objc.io\/episodes\/S01E82-refactoring-imperative-layout-code","synopsis":"We refactor a simple flow layout to have a functional interface, disentangling the layout code from UIKit code."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748552.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294589987.m3u8?s=4879a4caf268badc95c40f2137b471e57882371f&oauth2_token_id=1138343922","released_at":1513954800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748552_590x270.jpg","collection":"incremental-programming","media_duration":2147,"title":"Reference Cycles and Ownership","subscription_only":true,"number":81,"url":"https:\/\/talk.objc.io\/episodes\/S01E81-reference-cycles-and-ownership","synopsis":"We use Xcode's memory debugger to resolve all the reference cycles in our glitch-free reactive code and introduce a proper ownership model."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731748581.jpg","released_at":1513350000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748581_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294586951.m3u8?s=3c6e5a751fcc27fd097cb6ea2f50413a8ebb7014&oauth2_token_id=1138343922","media_duration":802,"title":"Swift String vs. NSString","subscription_only":false,"number":80,"url":"https:\/\/talk.objc.io\/episodes\/S01E80-swift-string-vs-nsstring","synopsis":"We look at how to work with ranges in a mixed Swift String\/NSString environment."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749425.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294586504.m3u8?s=52d464da06eaa2ae3c6722a1a0b816ee3fecb9d3&oauth2_token_id=1138343922","released_at":1512745200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749425_590x270.jpg","collection":"swift-the-language","media_duration":1508,"title":"String Parsing Performance","subscription_only":true,"number":79,"url":"https:\/\/talk.objc.io\/episodes\/S01E79-string-parsing-performance","synopsis":"We benchmark the CSV parsing code from the previous episode and refactor it to become an order of magnitude faster."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749466.jpg","released_at":1512140400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749466_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294585532.m3u8?s=29667572f0119071eb0134176ce3698855f5a287&oauth2_token_id=1138343922","media_duration":1708,"title":"Swift Strings and Substrings","subscription_only":false,"number":78,"url":"https:\/\/talk.objc.io\/episodes\/S01E78-swift-strings-and-substrings","synopsis":"We write a simple CSV parser as an example demonstrating how to work with Swift's String and Substring types."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749554.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294584321.m3u8?s=03e5a9ff2f36c12f17b29e87addaf6c10248bfc1&oauth2_token_id=1138343922","released_at":1511535600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749554_590x270.jpg","collection":"incremental-programming","media_duration":1495,"title":"A Technique to Avoid Reactive Glitches","subscription_only":true,"number":77,"url":"https:\/\/talk.objc.io\/episodes\/S01E77-a-technique-to-avoid-reactive-glitches","synopsis":"We refactor the simple reactive library from the last episode using topological sorting to avoid any temporarily wrong values."},{"synopsis":"We look at an example of a reactive pipeline with surprising behavior, discuss why it occurs, and how it could be improved.","poster_url":"https:\/\/i.vimeocdn.com\/video\/731749611.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294583265.m3u8?s=991a3c12da65b350f4e6769141879479a755af94&oauth2_token_id=1138343922","released_at":1510930800,"hls_url":"https:\/\/player.vimeo.com\/external\/294583210.m3u8?s=178c4ff0538bb8d1d69e281d99f92ad6a1d9222c&oauth2_token_id=1138343922","collection":"incremental-programming","media_duration":1096,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749611_590x270.jpg","title":"Understanding Reactive Glitches","subscription_only":false,"url":"https:\/\/talk.objc.io\/episodes\/S01E76-understanding-reactive-glitches","number":76},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749649.jpg","released_at":1510326000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749649_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294582498.m3u8?s=391d06f0d47bc50027c033348ba5c8b2224a4743&oauth2_token_id=1138343922","media_duration":1045,"title":"Auto Layout with Key Paths","subscription_only":false,"number":75,"url":"https:\/\/talk.objc.io\/episodes\/S01E75-auto-layout-with-key-paths","synopsis":"We clean up our layout code by introducing helper functions that leverage Swift's key paths."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749702.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294581974.m3u8?s=dddff9cea241bb469c65144a5467c2841553ba65&oauth2_token_id=1138343922","released_at":1509721200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749702_590x270.jpg","collection":"architecture","media_duration":1269,"title":"View Bindings in Pure Swift (Part 2)","subscription_only":true,"number":74,"url":"https:\/\/talk.objc.io\/episodes\/S01E74-view-bindings-in-pure-swift-part-2","synopsis":"We continue to expand our experimental view binding mechanism to implement dark mode in our app."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749723.jpg","released_at":1509116400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749723_590x270.jpg","collection":"architecture","hls_url":"https:\/\/player.vimeo.com\/external\/294581146.m3u8?s=e914f9a26507f123719bce484d18dadf34bdf2be&oauth2_token_id=1138343922","media_duration":1332,"title":"View Bindings in Pure Swift","subscription_only":false,"number":73,"url":"https:\/\/talk.objc.io\/episodes\/S01E73-view-bindings-in-pure-swift","synopsis":"We experiment with reactive view bindings that don't rely on runtime programming."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749781.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294580341.m3u8?s=3812216aba3817f8bd421fbdc578d9b02ac95c13&oauth2_token_id=1138343922","released_at":1508511600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749781_590x270.jpg","collection":"architecture","media_duration":2011,"title":"Adding a Custom View to a View-State Driven App","subscription_only":true,"number":72,"url":"https:\/\/talk.objc.io\/episodes\/S01E72-adding-a-custom-view-to-a-view-state-driven-app","synopsis":"We introduce a project we're going to work on over a few episodes. To get familiar with the code, we build a new feature using the app's view-state driven approach."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749806.jpg","released_at":1507906800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749806_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294579031.m3u8?s=924de6fca59b7a20a7108b28808759674f8d4091&oauth2_token_id=1138343922","media_duration":1454,"title":"Type-Safe File Paths with Phantom Types","subscription_only":false,"number":71,"url":"https:\/\/talk.objc.io\/episodes\/S01E71-type-safe-file-paths-with-phantom-types","synopsis":"Brandon Kase joins us to show how Swift's type system can be leveraged to check file paths at compile time."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749870.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294578143.m3u8?s=7f51c0bb799b242c10376869dffbb3a64cd1dd69&oauth2_token_id=1138343922","released_at":1507302000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749870_590x270.jpg","collection":"table-views","media_duration":926,"title":"Table View Animations with Reactive Arrays","subscription_only":true,"number":70,"url":"https:\/\/talk.objc.io\/episodes\/S01E70-table-view-animations-with-reactive-arrays","synopsis":"We use the reactive array type from episodes #67 and #69 to back a table view. This allows us to correctly animate changes in the underlying data, even with filter and sort transformations applied."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731749914.jpg","released_at":1506697200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749914_590x270.jpg","collection":"experiments","hls_url":"https:\/\/player.vimeo.com\/external\/294577549.m3u8?s=9bb38852301e3e556fa108052212b2ce7ba8888e&oauth2_token_id=1138343922","media_duration":1855,"title":"Reactive Data Structures: Arrays","subscription_only":false,"number":69,"url":"https:\/\/talk.objc.io\/episodes\/S01E69-reactive-data-structures-arrays","synopsis":"We build a reactive array type on top of the reactive list from episode #67 and implement a filter method."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750218.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294576500.m3u8?s=e7a0657c27f247ec2681cce79d20790ffee23108&oauth2_token_id=1138343922","released_at":1506092400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750218_590x270.jpg","collection":"architecture","media_duration":1499,"title":"The Elm Architecture (Part 2)","subscription_only":true,"number":68,"url":"https:\/\/talk.objc.io\/episodes\/S01E68-the-elm-architecture-part-2","synopsis":"We extend our Elm-style app with a more dynamic view hierarchy by adding a navigation controller and a table view."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750268.jpg","released_at":1505487600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750268_590x270.jpg","collection":"experiments","hls_url":"https:\/\/player.vimeo.com\/external\/294575702.m3u8?s=3d998388d8800be4c23b53597e96963835ac917b&oauth2_token_id=1138343922","media_duration":1558,"title":"Reactive Data Structures: Linked Lists","subscription_only":false,"number":67,"url":"https:\/\/talk.objc.io\/episodes\/S01E67-reactive-data-structures-linked-lists","synopsis":"We build a reactive linked list on top of reactive programming primitives. We implement a reduce method on this type, which does the minimum amount of work when the underlying data changes."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750389.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294574951.m3u8?s=3eeeb3028106e22b0c7e0f7892cd4f0a6a32e9f0&oauth2_token_id=1138343922","released_at":1504882800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750389_590x270.jpg","collection":"architecture","media_duration":999,"title":"The Elm Architecture (Part 1)","subscription_only":true,"number":66,"url":"https:\/\/talk.objc.io\/episodes\/S01E66-the-elm-architecture-part-1","synopsis":"We refactor our reducer-based project from episode #62 to use The Elm Architecture. Instead of interacting with UIKit directly, we build a virtual view hierarchy and let our Elm framework do the rest."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750425.jpg","released_at":1504278000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750425_590x270.jpg","collection":"data-structures","hls_url":"https:\/\/player.vimeo.com\/external\/294574404.m3u8?s=feacde5bfe51e2ea06eeb273aa2d56aa3557ebcc&oauth2_token_id=1138343922","media_duration":1678,"title":"Playground QuickLook for Binary Trees","subscription_only":false,"number":65,"url":"https:\/\/talk.objc.io\/episodes\/S01E65-playground-quicklook-for-binary-trees","synopsis":"We create a custom Quick Look extension to visualize binary tree structures in playgrounds."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750489.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294573778.m3u8?s=16ba2383b36c2c62ef7e3fa90ad4bbfeffce5138&oauth2_token_id=1138343922","released_at":1503673200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750489_590x270.jpg","collection":"table-views","media_duration":1824,"title":"Driving Table View Animations","subscription_only":true,"number":64,"url":"https:\/\/talk.objc.io\/episodes\/S01E64-driving-table-view-animations","synopsis":"We build a component similar to NSFetchedResultsController to decouple our view data and to drive table view animations."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750521.jpg","released_at":1503068400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750521_590x270.jpg","collection":"experiments","hls_url":"https:\/\/player.vimeo.com\/external\/294572908.m3u8?s=65aeb7939439a3cef19d5895b3dd96708f4a6603&oauth2_token_id=1138343922","media_duration":1379,"title":"Mutable Shared Structs (Part 2)","subscription_only":false,"number":63,"url":"https:\/\/talk.objc.io\/episodes\/S01E63-mutable-shared-structs-part-2","synopsis":"We refine the observation capabilities of our new data type."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750588.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294572287.m3u8?s=9c1859cfe773fff0e73ac59a574014325e82abf0&oauth2_token_id=1138343922","released_at":1502463600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750588_590x270.jpg","collection":"architecture","media_duration":1860,"title":"Testable View Controllers with Reducers","subscription_only":true,"number":62,"url":"https:\/\/talk.objc.io\/episodes\/S01E62-testable-view-controllers-with-reducers","synopsis":"We show the reducer pattern to simplify state management and to make typical view controller code more testable."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750610.jpg","released_at":1501858800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750610_590x270.jpg","collection":"experiments","hls_url":"https:\/\/player.vimeo.com\/external\/294571380.m3u8?s=d57c96e7f92005baf321d361e7dda96cb71de8b2&oauth2_token_id=1138343922","media_duration":1810,"title":"Mutable Shared Structs (Part 1)","subscription_only":false,"number":61,"url":"https:\/\/talk.objc.io\/episodes\/S01E61-mutable-shared-structs-part-1","synopsis":"We recap the tradeoffs between classes and structs and start implementation of our new type, leveraging Swift 4's keypaths."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750671.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294570688.m3u8?s=828f1e71a2ac50c78e6ccbe3d4068ada76955df4&oauth2_token_id=1138343922","released_at":1501254000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750671_590x270.jpg","collection":"tooling","media_duration":864,"title":"Xcode 9 Productivity Tips","subscription_only":true,"number":60,"url":"https:\/\/talk.objc.io\/episodes\/S01E60-xcode-9-productivity-tips","synopsis":"We show some of our favorite new productivity features in Xcode 9."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750707.jpg","released_at":1500649200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750707_590x270.jpg","collection":"tooling","hls_url":"https:\/\/player.vimeo.com\/external\/294570283.m3u8?s=e7e97f3b1a76594be8c2bdf43612a1feff48b586&oauth2_token_id=1138343922","media_duration":754,"title":"Refactoring with Xcode 9","subscription_only":false,"number":59,"url":"https:\/\/talk.objc.io\/episodes\/S01E59-refactoring-with-xcode-9","synopsis":"We take a look at features like renaming, extracting expressions, extracting methods, and more."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750730.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294569191.m3u8?s=c64b0e462f7003c6f7ba0fe40762908dd0a15947&oauth2_token_id=1138343922","released_at":1500044400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750730_590x270.jpg","collection":"data-structures","media_duration":1911,"title":"Red-Black Trees","subscription_only":true,"number":58,"url":"https:\/\/talk.objc.io\/episodes\/S01E58-red-black-trees","synopsis":"Building on the binary search tree code from episode #56, we implement red-black trees as self-balancing tree data structures and benchmark their performance."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750798.jpg","released_at":1499439600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750798_590x270.jpg","collection":"","hls_url":"https:\/\/player.vimeo.com\/external\/294569138.m3u8?s=e432bd41e8b9b7a02eecc65ee35ecba7dd577dad&oauth2_token_id=1138343922","media_duration":1471,"title":"Certificate Pinning","subscription_only":false,"number":57,"url":"https:\/\/talk.objc.io\/episodes\/S01E57-certificate-pinning","synopsis":"Today we're joined by Rob Napier, who explains why and how to add certificate pinning to your app."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750866.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294568528.m3u8?s=7ebb74a6a3db94da1311fc4b5a13f1d7ae46acda&oauth2_token_id=1138343922","released_at":1498834800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750866_590x270.jpg","collection":"data-structures","media_duration":1620,"title":"Binary Search Trees","subscription_only":true,"number":56,"url":"https:\/\/talk.objc.io\/episodes\/S01E56-binary-search-trees","synopsis":"We look at binary search trees as an alternative to last episode's sorted array implementation. We benchmark the performance of insertion and lookup in both data structures, with some surprising results."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750905.jpg","released_at":1498230000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750905_590x270.jpg","collection":"data-structures","hls_url":"https:\/\/player.vimeo.com\/external\/294567641.m3u8?s=c51e1a75a629bbf8a266a415c48aaa02e1a6c29a&oauth2_token_id=1138343922","media_duration":1611,"title":"Sorted Arrays with Binary Search","subscription_only":false,"number":55,"url":"https:\/\/talk.objc.io\/episodes\/S01E55-sorted-arrays-with-binary-search","synopsis":"Together with Károly, we improve our sorted array implementation using binary search. We benchmark both implementations to learn about their real-world performance."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731750982.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294566887.m3u8?s=3774aa5e515c306653bafe3da5458790ce0c7484&oauth2_token_id=1138343922","released_at":1497625200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750982_590x270.jpg","collection":"architecture","media_duration":987,"title":"UI Elements with Callbacks","subscription_only":true,"number":54,"url":"https:\/\/talk.objc.io\/episodes\/S01E54-ui-elements-with-callbacks","synopsis":"We write a dedicated target-action to make it easier to augment existing UI controls with callbacks."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751022.jpg","released_at":1497020400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751022_590x270.jpg","collection":"ios-at-kickstarter","hls_url":"https:\/\/player.vimeo.com\/external\/294566400.m3u8?s=774d5b2522ea3162856d1a1d2a23f8fa86e28d85&oauth2_token_id=1138343922","media_duration":2327,"title":"Test-Driven Reactive Programming","subscription_only":false,"number":53,"url":"https:\/\/talk.objc.io\/episodes\/S01E53-test-driven-reactive-programming","synopsis":"Lisa from Kickstarter shows us their test-driven development process to reactive programming."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751067.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294565056.m3u8?s=c5827949e93abc4b2dc0031f61cf99afa6d370a5&oauth2_token_id=1138343922","released_at":1496415600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751067_590x270.jpg","collection":"swift-the-language","media_duration":709,"title":"Deleting Code with Swift 4","subscription_only":true,"number":52,"url":"https:\/\/talk.objc.io\/episodes\/S01E52-deleting-code-with-swift-4","synopsis":"Swift 4's new features lets us delete code we've written in previous episodes."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751132.jpg","released_at":1495810800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751132_590x270.jpg","collection":"ios-at-kickstarter","hls_url":"https:\/\/player.vimeo.com\/external\/294565015.m3u8?s=e9ac6dbe0a7def66b807a21058385b28ad46c38e&oauth2_token_id=1138343922","media_duration":1283,"title":"Playground-Driven Development","subscription_only":false,"number":51,"url":"https:\/\/talk.objc.io\/episodes\/S01E51-playground-driven-development","synopsis":"Brandon from Kickstarter demos how the company uses playgrounds to prototype and style individual view controllers."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751168.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294564566.m3u8?s=7bea18b4d202b0a1a7725cd1951ac2556f7bf88c&oauth2_token_id=1138343922","released_at":1495206000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751168_590x270.jpg","collection":"server-side-swift","media_duration":1514,"title":"Interfacing with PostgreSQL (Part 2)","subscription_only":true,"number":50,"url":"https:\/\/talk.objc.io\/episodes\/S01E50-interfacing-with-postgresql-part-2","synopsis":"We extend our libpq wrapper to handle queries with properly escaped parameters. To achieve this, we have to dive deep into Swift's unsafe pointer APIs."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751221.jpg","released_at":1494601200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751221_590x270.jpg","collection":"ios-at-kickstarter","hls_url":"https:\/\/player.vimeo.com\/external\/294563412.m3u8?s=0f27aca34073bfb1c64067be2fb327e07ef0bd05&oauth2_token_id=1138343922","media_duration":1631,"title":"Deep Linking","subscription_only":false,"number":49,"url":"https:\/\/talk.objc.io\/episodes\/S01E49-deep-linking","synopsis":"Brandon from Kickstarter shows their approach of unifying all potential entry points into an iOS app using a common route enum, both in a simple demo implementaion and in their open source code base."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751254.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294562334.m3u8?s=693990e80d731fa4e61044d660dea90a5fcd433a&oauth2_token_id=1138343922","released_at":1493996400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751254_590x270.jpg","collection":"server-side-swift","media_duration":1730,"title":"Interfacing with PostgreSQL","subscription_only":true,"number":48,"url":"https:\/\/talk.objc.io\/episodes\/S01E48-interfacing-with-postgresql","synopsis":"We implement a lightweight wrapper around the libpq C library."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751310.jpg","released_at":1493391600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751310_590x270.jpg","collection":"ios-at-kickstarter","hls_url":"https:\/\/player.vimeo.com\/external\/294560541.m3u8?s=f15dc7b0e4c3f222abebae858ab4773ba77c5b6b&oauth2_token_id=1138343922","media_duration":2038,"title":"View Models","subscription_only":false,"number":47,"url":"https:\/\/talk.objc.io\/episodes\/S01E47-view-models","synopsis":"Brandon from Kickstarter shows us how they write highly testable code with view models. We integrate Apple Pay payments and look at their open-source codebase."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751375.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294559523.m3u8?s=44b2278113af54b95e4c57f49fb1f5e3bcee2852&oauth2_token_id=1138343922","released_at":1492786800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751375_590x270.jpg","collection":"swift-the-language","media_duration":959,"title":"Combined Class and Protocol Requirements","subscription_only":true,"number":46,"url":"https:\/\/talk.objc.io\/episodes\/S01E46-combined-class-and-protocol-requirements","synopsis":"We look at multiple ways to create variables that have a class type but also conform to a protocol."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751410.jpg","released_at":1492182000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751410_590x270.jpg","collection":"server-side-swift","hls_url":"https:\/\/player.vimeo.com\/external\/294559035.m3u8?s=2f07b5c1d73048c4da83c54fe811e6f3124439a0&oauth2_token_id=1138343922","media_duration":1367,"title":"Routing","subscription_only":false,"number":45,"url":"https:\/\/talk.objc.io\/episodes\/S01E45-routing","synopsis":"We implement a type safe and Swift-like routing infrastructure that's pretty different from the common approach of most web frameworks."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751480.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294558430.m3u8?s=c87365aff2fa9b47ac3864846d7fbb7be2bdb221&oauth2_token_id=1138343922","released_at":1491577200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751480_590x270.jpg","collection":"server-side-swift","media_duration":1473,"title":"Setting Up a Server-Side Swift Project","subscription_only":true,"number":44,"url":"https:\/\/talk.objc.io\/episodes\/S01E44-setting-up-a-server-side-swift-project","synopsis":"We set up our development environment using the Swift package manager and Docker."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751522.jpg","released_at":1490972400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751522_590x270.jpg","collection":"architecture","hls_url":"https:\/\/player.vimeo.com\/external\/294557807.m3u8?s=72581ec6b729898bec79f6973b1a4bd51d534704&oauth2_token_id=1138343922","media_duration":1012,"title":"View Controller Refactoring","subscription_only":false,"number":43,"url":"https:\/\/talk.objc.io\/episodes\/S01E43-view-controller-refactoring","synopsis":"Instead of letting multiple view controllers manage the navigation bar's state individually, we pull this code out and unify the logic in one place."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751552.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294556830.m3u8?s=fa4c18d4d54c4bd06b4dac7ceace06f0fd93d15d&oauth2_token_id=1138343922","released_at":1490367600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751552_590x270.jpg","collection":"reactive-programming","media_duration":1416,"title":"Thread Safety","subscription_only":true,"number":42,"url":"https:\/\/talk.objc.io\/episodes\/S01E42-thread-safety","synopsis":"We make our Signal implementation thread-safe by safeguarding the access to shared resources."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746087.jpg","released_at":1489762800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746087_590x270.jpg","collection":"collection-protocols","hls_url":"https:\/\/player.vimeo.com\/external\/294533928.m3u8?s=68cd320570342d9895519cf0992b163788a28484&oauth2_token_id=1138343922","media_duration":1011,"title":"Conforming IndexSet to Collection","subscription_only":false,"number":41,"url":"https:\/\/talk.objc.io\/episodes\/S01E41-conforming-indexset-to-collection","synopsis":"To conform IndexSet to the Collection protocol we implement a custom index type along the way."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751705.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294556789.m3u8?s=754f733e7f0d6a1b7207169bfc12a296294b29c5&oauth2_token_id=1138343922","released_at":1489158000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751705_590x270.jpg","collection":"reactive-programming","media_duration":988,"title":"Signal Ownership and Subscriptions","subscription_only":true,"number":40,"url":"https:\/\/talk.objc.io\/episodes\/S01E40-signal-ownership-and-subscriptions","synopsis":"We add the ability to map over signals and control subscriptions in a more fine-grained manner. Along the way, we improve the signal ownership model and implement the concept of disposables."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751744.jpg","released_at":1488553200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751744_590x270.jpg","collection":"reactive-programming","hls_url":"https:\/\/player.vimeo.com\/external\/294556081.m3u8?s=0c688d1ef2b5d6f9ff88442da6e8f1836a4e374b&oauth2_token_id=1138343922","media_duration":1425,"title":"From Futures to Signals","subscription_only":false,"number":39,"url":"https:\/\/talk.objc.io\/episodes\/S01E39-from-futures-to-signals","synopsis":"We extend the Future type of a previous episode to a simple reactive library. Along the way, we dive into debugging a reference cycle in our implementation."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751802.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294555284.m3u8?s=9506cfcc9b99da51c117c12f2223fe0817476675&oauth2_token_id=1138343922","released_at":1487948400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751802_590x270.jpg","collection":"collection-protocols","media_duration":848,"title":"Conforming IndexSet to Sequence","subscription_only":true,"number":38,"url":"https:\/\/talk.objc.io\/episodes\/S01E38-conforming-indexset-to-sequence","synopsis":"Conforming to the Sequence protocol allows us to efficiently iterate over the elements, and we gain all of its useful functionality."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751873.jpg","released_at":1487343600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751873_590x270.jpg","collection":"collection-protocols","hls_url":"https:\/\/player.vimeo.com\/external\/294554968.m3u8?s=534d6b1374c75de9d9347d8b4d38a7d6d5231cd3&oauth2_token_id=1138343922","media_duration":1132,"title":"Building a Custom IndexSet Collection","subscription_only":false,"number":37,"url":"https:\/\/talk.objc.io\/episodes\/S01E37-building-a-custom-indexset-collection","synopsis":"We build the basics for a custom index set collection type."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751931.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294554517.m3u8?s=f041555bfedb1f0cffa1711a4c92c3ff6f2fd538&oauth2_token_id=1138343922","released_at":1486738800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751931_590x270.jpg","collection":"reactive-programming","media_duration":1050,"title":"Futures","subscription_only":true,"number":36,"url":"https:\/\/talk.objc.io\/episodes\/S01E36-futures","synopsis":"We implement a Futures type that we can use instead of callbacks as a first step towards a reactive library."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731751957.jpg","released_at":1486134000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751957_590x270.jpg","collection":"collection-protocols","hls_url":"https:\/\/player.vimeo.com\/external\/294554120.m3u8?s=c7f96c0e491ff7c45232f9b3d94150fdacd738bf&oauth2_token_id=1138343922","media_duration":1002,"title":"Sorted Arrays","subscription_only":false,"number":35,"url":"https:\/\/talk.objc.io\/episodes\/S01E35-sorted-arrays","synopsis":"We build a sorted array type on top of Swift's native array and make it conform to the Collection protocol."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752062.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294553659.m3u8?s=6a0617c287d88fc4e48aa8179521a7cf2594ec85&oauth2_token_id=1138343922","released_at":1485529200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752062_590x270.jpg","collection":"reactive-programming","media_duration":1572,"title":"Reactive Programming","subscription_only":true,"number":34,"url":"https:\/\/talk.objc.io\/episodes\/S01E34-reactive-programming","synopsis":"We take a look at how reactive programming challenges us to think differently."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752094.jpg","released_at":1484924400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752094_590x270.jpg","collection":"collection-protocols","hls_url":"https:\/\/player.vimeo.com\/external\/294552953.m3u8?s=cdd5783a3066a79aeb37de1f892ba3edbd278d4c&oauth2_token_id=1138343922","media_duration":1014,"title":"Sequence & Iterator","subscription_only":false,"number":33,"url":"https:\/\/talk.objc.io\/episodes\/S01E33-sequence-iterator","synopsis":"We make our collection extension even more generic by implementing it on the Sequence protocol."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752149.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294552571.m3u8?s=4ff71adef4a17ca122a71899c822c0dd1c433a38&oauth2_token_id=1138343922","released_at":1484319600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752149_590x270.jpg","collection":"collection-protocols","media_duration":916,"title":"Array, ArraySlice & Collection","subscription_only":true,"number":32,"url":"https:\/\/talk.objc.io\/episodes\/S01E32-array-arrayslice-collection","synopsis":"We show how to use the Collection protocol to make an extension available not just on array, but on all collections."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752184.jpg","released_at":1483714800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752184_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294551891.m3u8?s=7d9694fb259cbc132830da931dfd4f734eb6abeb&oauth2_token_id=1138343922","media_duration":914,"title":"Mutating Untyped Dictionaries","subscription_only":false,"number":31,"url":"https:\/\/talk.objc.io\/episodes\/S01E31-mutating-untyped-dictionaries","synopsis":"Mutating a nested untyped dictionary can be a challenge. To solve it we discuss the mutability of value types and the concept of l-values."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752247.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294551055.m3u8?s=a648220d22a73402e5995990996a15cd68e2de7f&oauth2_token_id=1138343922","released_at":1483110000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752247_590x270.jpg","collection":"","media_duration":967,"title":"Interfaces","subscription_only":true,"number":30,"url":"https:\/\/talk.objc.io\/episodes\/S01E30-interfaces","synopsis":"We talk about the importance of types and interfaces as tools to express your intent precisely and to set the proper boundaries."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752713.jpg","released_at":1481900400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752713_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294550613.m3u8?s=4815484f0ed4d25e32379bc269e96718711b1453&oauth2_token_id=1138343922","media_duration":962,"title":"Protocols & Class Hierarchies","subscription_only":false,"number":29,"url":"https:\/\/talk.objc.io\/episodes\/S01E29-protocols-class-hierarchies","synopsis":"We refactor a class hierarchy using a protocol and discuss the differences between both approaches."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752779.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294550226.m3u8?s=be334e9d1824de5fa570a910a49100dfad18959c&oauth2_token_id=1138343922","released_at":1481295600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752779_590x270.jpg","collection":"type-safe-api-wrappers","media_duration":1082,"title":"Typed Notifications (Part 2)","subscription_only":true,"number":28,"url":"https:\/\/talk.objc.io\/episodes\/S01E28-typed-notifications-part-2","synopsis":"We extend our notification wrapper from episode #27 and discuss an alternative protocol-based approach."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752818.jpg","released_at":1480690800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752818_590x270.jpg","collection":"type-safe-api-wrappers","hls_url":"https:\/\/player.vimeo.com\/external\/294549779.m3u8?s=0a83a702196517dc515a07c2d46e639cba7936f3&oauth2_token_id=1138343922","media_duration":1072,"title":"Typed Notifications (Part 1)","subscription_only":false,"number":27,"url":"https:\/\/talk.objc.io\/episodes\/S01E27-typed-notifications-part-1","synopsis":"A lightweight generic wrapper around Foundation's notification API lets us avoid boilerplate code and provides a type-safe API."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752867.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294549379.m3u8?s=881e8c1de5153afa1c161066041463bd52eb5118&oauth2_token_id=1138343922","released_at":1480086000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752867_590x270.jpg","collection":"table-views","media_duration":1410,"title":"Generic Table View Controllers (Part 2)","subscription_only":true,"number":26,"url":"https:\/\/talk.objc.io\/episodes\/S01E26-generic-table-view-controllers-part-2","synopsis":"We build a generic, type-safe table view controller that can handle multiple cell classes."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752888.jpg","released_at":1479481200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752888_590x270.jpg","collection":"networking","hls_url":"https:\/\/player.vimeo.com\/external\/294548812.m3u8?s=9df16e37ef4f9d402c16d96aaec34743f546ba15&oauth2_token_id=1138343922","media_duration":1413,"title":"Adding Caching","subscription_only":false,"number":25,"url":"https:\/\/talk.objc.io\/episodes\/S01E25-adding-caching","synopsis":"We add support for caching network requests without altering our original networking abstraction."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752951.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294548198.m3u8?s=61244085e4cbc8bf837815dcda746007fbd886c4&oauth2_token_id=1138343922","released_at":1478876400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752951_590x270.jpg","collection":"architecture","media_duration":929,"title":"Delegates & Callbacks","subscription_only":true,"number":24,"url":"https:\/\/talk.objc.io\/episodes\/S01E24-delegates-callbacks","synopsis":"We discuss the pros and cons of delegates versus callback functions and why delegate protocols are always class only."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731752987.jpg","released_at":1478271600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752987_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294547833.m3u8?s=90d064ff163089694bb6648d7fe669837f492aff&oauth2_token_id=1138343922","media_duration":1447,"title":"Splitting Arrays","subscription_only":false,"number":23,"url":"https:\/\/talk.objc.io\/episodes\/S01E23-splitting-arrays","synopsis":"We talk about a familiar but surprisingly tricky problem: splitting an array into groups of elements. We discuss the pros and cons of our own solutions along with the solutions people sent us via Twitter!"},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753007.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294546844.m3u8?s=86bd40ac87819196e5ed5271ce9bec83e4b8e16b&oauth2_token_id=1138343922","released_at":1477666800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753007_590x270.jpg","collection":"","media_duration":1037,"title":"Command Line Tools with Swift","subscription_only":true,"number":22,"url":"https:\/\/talk.objc.io\/episodes\/S01E22-command-line-tools-with-swift","synopsis":"We show how we build simple command line tools leveraging the Cocoa frameworks. We use the Swift Package manager to include dependencies in our project."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753062.jpg","released_at":1477062000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753062_590x270.jpg","collection":"swift-the-language","hls_url":"https:\/\/player.vimeo.com\/external\/294546794.m3u8?s=af8cde693cfca94d6df7a1bbb091deff4242bea5&oauth2_token_id=1138343922","media_duration":967,"title":"Structs and Mutation","subscription_only":false,"number":21,"url":"https:\/\/talk.objc.io\/episodes\/S01E21-structs-and-mutation","synopsis":"We can change structs by mutation, functional chaining, and inout parameters. We discuss how they differ at the call site and why they’re all equivalent."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753085.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294545920.m3u8?s=a909420216705b155f418580e0db66a74ac1ca31&oauth2_token_id=1138343922","released_at":1476457200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753085_590x270.jpg","collection":"swift-the-language","media_duration":1131,"title":"Understanding Value Type Performance","subscription_only":true,"number":20,"url":"https:\/\/talk.objc.io\/episodes\/S01E20-understanding-value-type-performance","synopsis":"We use copy-on-write to write an efficient struct wrapper around NSMutableData and discuss how the standard library uses the same approach."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753134.jpg","released_at":1475852400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753134_590x270.jpg","collection":"functional-programming","hls_url":"https:\/\/player.vimeo.com\/external\/294545891.m3u8?s=e004583bd45cedd02213f4aa41bb012dc67d2474&oauth2_token_id=1138343922","media_duration":1385,"title":"From Runtime Programming to Functions","subscription_only":false,"number":19,"url":"https:\/\/talk.objc.io\/episodes\/S01E19-from-runtime-programming-to-functions","synopsis":"We build a flexible sort descriptor abstraction on top of Swift's native sort methods, which is dynamic and type safe."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753174.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294544811.m3u8?s=18c21fe62be75f536f9b1350d2bce46522a50dff&oauth2_token_id=1138343922","released_at":1475247600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753174_590x270.jpg","collection":"ledger-mac-app","media_duration":960,"title":"Adding Search","subscription_only":true,"number":18,"url":"https:\/\/talk.objc.io\/episodes\/S01E18-adding-search","synopsis":"We leverage the existing infrastructure of our app to add a search field with very little code."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753226.jpg","released_at":1474642800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753226_590x270.jpg","collection":"ledger-mac-app","hls_url":"https:\/\/player.vimeo.com\/external\/294544758.m3u8?s=a9ef78d3d8cc7dee15cd1bbab2c5ee7dbc22215f&oauth2_token_id=1138343922","media_duration":1111,"title":"Architecture","subscription_only":false,"number":17,"url":"https:\/\/talk.objc.io\/episodes\/S01E17-architecture","synopsis":"We connect multiple view controllers using a coordinator and callback functions. We simplify the control flow by refactoring the UI state into its own struct."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753306.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294544284.m3u8?s=57abb779b2027953f7a7a0319e6d2bbabc07f862&oauth2_token_id=1138343922","released_at":1474038000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753306_590x270.jpg","collection":"ledger-mac-app","media_duration":1290,"title":"Building Parser Combinators (Part 2)","subscription_only":true,"number":16,"url":"https:\/\/talk.objc.io\/episodes\/S01E16-building-parser-combinators-part-2","synopsis":"We implement some of the more challenging parts of parser combinators."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753338.jpg","released_at":1473433200,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753338_590x270.jpg","collection":"ledger-mac-app","hls_url":"https:\/\/player.vimeo.com\/external\/294543691.m3u8?s=65f8646b0764ae28660016a526556acfcb536e75&oauth2_token_id=1138343922","media_duration":982,"title":"Building Parser Combinators (Part 1)","subscription_only":false,"number":15,"url":"https:\/\/talk.objc.io\/episodes\/S01E15-building-parser-combinators-part-1","synopsis":"Join us in the functional programming gym to stretch your object-oriented comfort zone while we lay the groundwork for a parser combinator library."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753366.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294542452.m3u8?s=4efc30f19c16fde105cfef4a964e52bc2fb6a247&oauth2_token_id=1138343922","released_at":1472824800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753366_590x270.jpg","collection":"ledger-mac-app","media_duration":1691,"title":"Growing Trees with Classes and Structs","subscription_only":true,"number":14,"url":"https:\/\/talk.objc.io\/episodes\/S01E14-growing-trees-with-classes-and-structs","synopsis":"We build a tree structure from an array of Ledger account names. We first implement the tree using a class, and then we refactor it to a struct and discuss the differences and tradeoffs involved."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753421.jpg","released_at":1472220000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753421_590x270.jpg","collection":"ledger-mac-app","hls_url":"https:\/\/player.vimeo.com\/external\/294542384.m3u8?s=6f1a75eb4f482f8c9ea701d8b06e1cf478bdc68b&oauth2_token_id=1138343922","media_duration":1523,"title":"Parsing Techniques","subscription_only":false,"number":13,"url":"https:\/\/talk.objc.io\/episodes\/S01E13-parsing-techniques","synopsis":"We look at two different techniques to parse a simple expression language: handwritten parsers and parser combinators."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753452.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294540396.m3u8?s=b85449be07d21d56109b7cae60ab57a40c7e6b63&oauth2_token_id=1138343922","released_at":1471618800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753452_590x270.jpg","collection":"ledger-mac-app","media_duration":1543,"title":"Evaluating Transactions","subscription_only":true,"number":12,"url":"https:\/\/talk.objc.io\/episodes\/S01E12-evaluating-transactions","synopsis":"Writing the code for evaluating transactions required continuous refactoring to keep our code simple and clean."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753510.jpg","released_at":1471014000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753510_590x270.jpg","collection":"ledger-mac-app","hls_url":"https:\/\/player.vimeo.com\/external\/294540006.m3u8?s=e633243c6a7ea7bb12fdb1ff0424baa0cff13c03&oauth2_token_id=1138343922","media_duration":1776,"title":"Evaluating Expressions","subscription_only":false,"number":11,"url":"https:\/\/talk.objc.io\/episodes\/S01E11-evaluating-expressions","synopsis":"Expressions are at the heart of Ledger. We write an evaluator for this expression language in a test-driven way."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/790458441.jpg","released_at":1471013940,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/790458441_590x270.jpg","collection":"ledger-mac-app","hls_url":"https:\/\/player.vimeo.com\/external\/341756829.m3u8?s=8c56bdda98fd8fa22968ad7c8cd2d63336ce4936&oauth2_token_id=1138343922","media_duration":465,"title":"Introduction","subscription_only":false,"number":10,"url":"https:\/\/talk.objc.io\/episodes\/S01E10-introduction","synopsis":"We give a quick introduction to Ledger itself and to the Mac app we're going to build."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731753573.jpg","released_at":1470402000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753573_590x270.jpg","collection":"","hls_url":"https:\/\/player.vimeo.com\/external\/294531751.m3u8?s=871b5b173046c43422af71d30acc6031937c4032&oauth2_token_id=1138343922","media_duration":834,"title":"Q&A","subscription_only":false,"number":9,"url":"https:\/\/talk.objc.io\/episodes\/S01E9-q-a","synopsis":"In this episode, we answer some of the questions we've received over the past few weeks. We cover networking, table views, stack views, our App class, and testing."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731745938.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294537253.m3u8?s=9545b518f2a4e9818dabf8f1c80ba59dd072ed83&oauth2_token_id=1138343922","released_at":1469800800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745938_590x270.jpg","collection":"networking","media_duration":1120,"title":"Adding POST Requests","subscription_only":true,"number":8,"url":"https:\/\/talk.objc.io\/episodes\/S01E8-adding-post-requests","synopsis":"We add POST support to a simple networking layer, using Swift's enums with associated values and generics."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731745691.jpg","released_at":1469196000,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745691_590x270.jpg","collection":"architecture","hls_url":"https:\/\/player.vimeo.com\/external\/294539566.m3u8?s=62635f8bcfd29ec49ad853cb2865b35735c9bfdd&oauth2_token_id=1138343922","media_duration":1303,"title":"Stack Views with Enums","subscription_only":false,"number":7,"url":"https:\/\/talk.objc.io\/episodes\/S01E7-stack-views-with-enums","synopsis":"We create an abstraction around stack views using enums to specify UI elements in a declarative style."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746199.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294533007.m3u8?s=2609792a56904a28083ccbad74a71a6da7ed6de8&oauth2_token_id=1138343922","released_at":1468587600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746199_590x270.jpg","collection":"table-views","media_duration":1182,"title":"Generic Table View Controllers","subscription_only":true,"number":6,"url":"https:\/\/talk.objc.io\/episodes\/S01E6-generic-table-view-controllers","synopsis":"We leverage Swift's generics to keep our table view controller code clean."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746253.jpg","released_at":1467982800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746253_590x270.jpg","collection":"architecture","hls_url":"https:\/\/player.vimeo.com\/external\/294532339.m3u8?s=5feaa1d0e5de45629b02be7a8ef5ea1ef5a5b02d&oauth2_token_id=1138343922","media_duration":1214,"title":"Connecting View Controllers","subscription_only":false,"number":5,"url":"https:\/\/talk.objc.io\/episodes\/S01E5-connecting-view-controllers","synopsis":"We refactor our code by moving the app's flow from the storyboard into a separate coordinator class. This avoids view controllers having implicit knowledge of their context."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731745802.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294538949.m3u8?s=bfa7e0beec8d5310c5495d763949dc421ead5896&oauth2_token_id=1138343922","released_at":1467379800,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745802_590x270.jpg","collection":"functional-programming","media_duration":1113,"title":"Rendering CommonMark (Part 2)","subscription_only":true,"number":4,"url":"https:\/\/talk.objc.io\/episodes\/S01E4-rendering-commonmark-part-2","synopsis":"We add customizable styles to our CommonMark renderer from episode #2."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731746009.jpg","released_at":1466780400,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746009_590x270.jpg","collection":"networking","hls_url":"https:\/\/player.vimeo.com\/external\/294534792.m3u8?s=0b8270d191286f1176394e906fc5ab330236bf78&oauth2_token_id=1138343922","media_duration":1310,"title":"Loading View Controllers","subscription_only":false,"number":3,"url":"https:\/\/talk.objc.io\/episodes\/S01E3-loading-view-controllers","synopsis":"We explore different approaches to factor out asynchronous loading code from view controllers, using protocols, container view controllers, and generics."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731745849.jpg","preview_url":"https:\/\/player.vimeo.com\/external\/294531864.m3u8?s=4f0bcb2b3cf0971fe43bb13460e7f5bd74eef80c&oauth2_token_id=1138343922","released_at":1466175600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745849_590x270.jpg","collection":"functional-programming","media_duration":1395,"title":"Rendering CommonMark","subscription_only":true,"number":2,"url":"https:\/\/talk.objc.io\/episodes\/S01E2-rendering-commonmark","synopsis":"We create attributed strings from CommonMark. We continually refactor our code to make the central logic short and understandable."},{"poster_url":"https:\/\/i.vimeocdn.com\/video\/731745967.jpg","released_at":1466175600,"small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745967_590x270.jpg","collection":"networking","hls_url":"https:\/\/player.vimeo.com\/external\/294535770.m3u8?s=d653b1e547a54fd8abbe331554d1ed3b195915d7&oauth2_token_id=1138343922","media_duration":1369,"title":"Tiny Networking Library","subscription_only":false,"number":1,"url":"https:\/\/talk.objc.io\/episodes\/S01E1-tiny-networking-library","synopsis":"We make use of Swift's generics and structs to build a simple network layer with great testability."}]